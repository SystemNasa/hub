local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local LocalPlayer = Players.LocalPlayer
local HttpService = game:GetService("HttpService")

-- Variables for state storage
local ghostEnabled = false
local originalCharacter
local ghostClone
local originalCFrame
local originalAnimateScript
local updateConnection

-- Variable to store the original HipHeight of the clone
local ghostOriginalHipHeight

-- Tables to store the original sizes of parts and Motor6D CFrames
local ghostOriginalSizes = {}
local ghostOriginalMotorCFrames = {}

-- List of body parts to synchronize
local bodyParts = {
    "Head", "UpperTorso", "LowerTorso",
    "LeftUpperArm", "LeftLowerArm", "LeftHand",
    "RightUpperArm", "RightLowerArm", "RightHand",
    "LeftUpperLeg", "LeftLowerLeg", "LeftFoot",
    "RightUpperLeg", "RightLowerLeg", "RightFoot"
}

-- Load BuiltInAnimationsR15 from GitHub using loadstring and game:HttpGet
local BuiltInAnimationsR15 = {}
do
    local url = "https://raw.githubusercontent.com/0riginalWarrior/Roblox/refs/heads/main/anims.lua"
    local success, response = pcall(function()
        return game:HttpGet(url)
    end)
    if success then
        local loadSuccess, result = pcall(function()
            return loadstring(response)()
        end)
        if loadSuccess and type(result) == "table" then
            BuiltInAnimationsR15 = result
        else
            warn("Failed to compile GitHub script:", result)
            BuiltInAnimationsR15 = {}
        end
    else
        warn("Failed to fetch animations from GitHub:", response)
        BuiltInAnimationsR15 = {}
    end
end

-- Hardcoded newAnimations table as per your request
local newAnimations = {
    ["twerking"] = 91014640753525,
    ["Wait love me like I love you"] = 113197266804415,
    ["head banger (fortnite)"] = 117390128696430,
    ["egg dance (acu saya)"] = 14765075073,
    ["nya arigato"] = 16038410193,
    ["move ya body"] = 109551168484965,
    ["hug"] = 113001288211277,
    ["push 2 start"] = 121825287394407,
    ["jumpstyle"] = 127818220981023,
    ["kiss"] = 130415689601813,
    ["jerk off"] = 85510928563896,
    ["backshots"] = 107788763755159
}

-- Check for duplicates and add new animations to BuiltInAnimationsR15
local existingIds = {}
for _, id in pairs(BuiltInAnimationsR15) do
    existingIds[id] = true
end

for animName, animId in pairs(newAnimations) do
    if not existingIds[animId] then
        BuiltInAnimationsR15[animName] = animId
    end
end

-- Explicitly initialize tables to ensure they are writable
local favoriteAnimations = {}
local animationKeybinds = {}
local customAnimations = {}

-- Function to save favorite animations to a file
local function saveFavorites()
    local success, encodedFavorites = pcall(HttpService.JSONEncode, HttpService, favoriteAnimations)
    if success then
        local saveSuccess, errorMessage = pcall(function()
            writefile("favorite_animations.json", encodedFavorites)
        end)
        if not saveSuccess then
            warn("Error saving favorites:", errorMessage)
        end
    else
        warn("Error encoding favorites:", encodedFavorites)
    end
end

-- Function to load favorite animations from a file
local function loadFavorites()
    local success, fileContent = pcall(readfile, "favorite_animations.json")
    if success then
        local decodeSuccess, decodedFavorites = pcall(HttpService.JSONDecode, HttpService, fileContent)
        if decodeSuccess and typeof(decodedFavorites) == "table" then
            favoriteAnimations = decodedFavorites
        else
            warn("Error decoding favorites:", decodedFavorites)
            favoriteAnimations = {}
        end
    else
        warn("No favorites file found, starting with empty favorites:", fileContent)
        favoriteAnimations = {}
    end
end

-- Function to save animation keybinds to a file
local function saveKeybinds()
    local keybindsToSave = {}
    for animName, keyCode in pairs(animationKeybinds) do
        keybindsToSave[animName] = keyCode.Name
    end
    local success, encodedKeybinds = pcall(HttpService.JSONEncode, HttpService, keybindsToSave)
    if success then
        local saveSuccess, errorMessage = pcall(function()
            writefile("animation_keybinds.json", encodedKeybinds)
        end)
        if not saveSuccess then
            warn("Error saving keybinds:", errorMessage)
        end
    else
        warn("Error encoding keybinds:", encodedKeybinds)
    end
end

-- Function to load animation keybinds from a file
local function loadKeybinds()
    local success, fileContent = pcall(readfile, "animation_keybinds.json")
    if success then
        local decodeSuccess, decodedKeybinds = pcall(HttpService.JSONDecode, HttpService, fileContent)
        if decodeSuccess and typeof(decodedKeybinds) == "table" then
            animationKeybinds = {}
            for animName, keyName in pairs(decodedKeybinds) do
                animationKeybinds[animName] = Enum.KeyCode[keyName]
            end
        else
            warn("Error decoding keybinds:", decodedKeybinds)
            animationKeybinds = {}
        end
    else
        warn("No keybinds file found, starting with empty keybinds:", fileContent)
        animationKeybinds = {}
    end
end

-- Function to save custom animations to a file
local function saveCustomAnimations()
    local success, encodedCustom = pcall(HttpService.JSONEncode, HttpService, customAnimations)
    if success then
        local saveSuccess, errorMessage = pcall(function()
            writefile("custom_animations.json", encodedCustom)
        end)
        if not saveSuccess then
            warn("Error saving custom animations:", errorMessage)
        end
    else
        warn("Error encoding custom animations:", encodedCustom)
    end
end

-- Function to load custom animations from a file
local function loadCustomAnimations()
    local success, fileContent = pcall(readfile, "custom_animations.json")
    if success then
        local decodeSuccess, decodedCustom = pcall(HttpService.JSONDecode, HttpService, fileContent)
        if decodeSuccess and typeof(decodedCustom) == "table" then
            customAnimations = decodedCustom
        else
            warn("Error decoding custom animations:", decodedCustom)
            customAnimations = {}
        end
    else
        warn("No custom animations file found, starting with empty custom animations:", fileContent)
        customAnimations = {}
    end
end

-- Helper function to scale a CFrame uniformly (keeps rotation)
local function scaleCFrame(cf, scale)
    local pos = cf.Position * scale
    local xRot, yRot, zRot = cf:ToEulerAnglesXYZ()
    return CFrame.new(pos) * CFrame.Angles(xRot, yRot, zRot)
end

-- Function that moves the clone so its lowest point (Y-coordinate) is at 0
local function adjustCloneToGround(clone)
    if not clone then return end
    local lowestY = math.huge
    for _, part in ipairs(clone:GetDescendants()) do
        if part:IsA("BasePart") then
            local bottomY = part.Position.Y - (part.Size.Y / 2)
            if bottomY < lowestY then
                lowestY = bottomY
            end
        end
    end
    local groundY = 0
    local offset = groundY - lowestY
    if offset > 0 then
        if clone.PrimaryPart then
            clone:SetPrimaryPartCFrame(clone.PrimaryPart.CFrame + Vector3.new(0, offset, 0))
        else
            clone:TranslateBy(Vector3.new(0, offset, 0))
        end
    end
end

-- Functions to temporarily preserve GUIs (ResetOnSpawn)
local preservedGuis = {}
local function preserveGuis()
    local playerGui = LocalPlayer:FindFirstChildWhichIsA("PlayerGui")
    if playerGui then
        for _, gui in ipairs(playerGui:GetChildren()) do
            if gui:IsA("ScreenGui") and gui.ResetOnSpawn then
                table.insert(preservedGuis, gui)
                gui.ResetOnSpawn = false
            end
        end
    end
end

local function restoreGuis()
    for _, gui in ipairs(preservedGuis) do
        gui.ResetOnSpawn = true
    end
    table.clear(preservedGuis)
end

-- Function to update the cloneâ€™s transparency (fully invisible)
local function updateCloneTransparency()
    if not ghostClone then return end
    for _, part in pairs(ghostClone:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Transparency = 1
        end
    end
    local head = ghostClone:FindFirstChild("Head")
    if head then
        for _, child in ipairs(head:GetChildren()) do
            if child:IsA("Decal") then
                child.Transparency = 1
            end
        end
    end
end

-- Function to synchronize the ragdolled body parts
local function updateRagdolledParts()
    if not ghostEnabled or not originalCharacter or not ghostClone then return end
    for _, partName in ipairs(bodyParts) do
        local originalPart = originalCharacter:FindFirstChild(partName)
        local clonePart = ghostClone:FindFirstChild(partName)
        if originalPart and clonePart then
            originalPart.CFrame = clonePart.CFrame
            originalPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
            originalPart.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
        end
    end
end

-- Function to enable/disable ghost mode
local function setGhostEnabled(newState)
    ghostEnabled = newState

    if ghostEnabled then
        local char = LocalPlayer.Character
        if not char then
            warn("No character found!")
            return
        end

        local humanoid = char:FindFirstChildWhichIsA("Humanoid")
        local root = char:FindFirstChild("HumanoidRootPart")
        if not humanoid or not root then
            warn("Character is missing either Humanoid or HumanoidRootPart!")
            return
        end

        originalCharacter = char
        originalCFrame = root.CFrame

        char.Archivable = true
        ghostClone = char:Clone()
        char.Archivable = false

        local originalName = originalCharacter.Name
        ghostClone.Name = originalName .. "_clone"

        local ghostHumanoid = ghostClone:FindFirstChildWhichIsA("Humanoid")
        if ghostHumanoid then
            ghostHumanoid.DisplayName = originalName .. "_clone"
            ghostOriginalHipHeight = ghostHumanoid.HipHeight
        end

        if not ghostClone.PrimaryPart then
            local hrp = ghostClone:FindFirstChild("HumanoidRootPart")
            if hrp then
                ghostClone.PrimaryPart = hrp
            end
        end

        for _, part in ipairs(ghostClone:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Transparency = 1
            end
        end
        local head = ghostClone:FindFirstChild("Head")
        if head then
            for _, child in ipairs(head:GetChildren()) do
                if child:IsA("Decal") then
                    child.Transparency = 1
                end
            end
        end

        ghostOriginalSizes = {}
        ghostOriginalMotorCFrames = {}
        for _, desc in ipairs(ghostClone:GetDescendants()) do
            if desc:IsA("BasePart") then
                ghostOriginalSizes[desc] = desc.Size
            elseif desc:IsA("Motor6D") then
                ghostOriginalMotorCFrames[desc] = { C0 = desc.C0, C1 = desc.C1 }
            end
        end

        local animate = originalCharacter:FindFirstChild("Animate")
        if animate then
            originalAnimateScript = animate
            originalAnimateScript.Disabled = true
            originalAnimateScript.Parent = ghostClone
        end

        preserveGuis()
        ghostClone.Parent = Workspace

        adjustCloneToGround(ghostClone)

        LocalPlayer.Character = ghostClone
        if ghostHumanoid then
            Workspace.CurrentCamera.CameraSubject = ghostHumanoid
        end
        restoreGuis()

        if originalAnimateScript then
            originalAnimateScript.Disabled = false
        end

        task.delay(0, function()
            if not ghostEnabled then return end
            if ReplicatedStorage:FindFirstChild("RagdollEvent") then
                ReplicatedStorage.RagdollEvent:FireServer()
            else
                warn("RagdollEvent not found in ReplicatedStorage!")
            end
            task.delay(0, function()
                if not ghostEnabled then return end
                if updateConnection then updateConnection:Disconnect() end
                updateConnection = RunService.Heartbeat:Connect(updateRagdolledParts)
            end)
        end)

    else
        if updateConnection then
            updateConnection:Disconnect()
            updateConnection = nil
        end

        if not originalCharacter or not ghostClone then return end

        for i = 1, 3 do
            if ReplicatedStorage:FindFirstChild("UnragdollEvent") then
                ReplicatedStorage.UnragdollEvent:FireServer()
            else
                warn("UnragdollEvent not found in ReplicatedStorage!")
            end
            task.wait(0.1)
        end

        local origRoot = originalCharacter:FindFirstChild("HumanoidRootPart")
        local ghostRoot = ghostClone:FindFirstChild("HumanoidRootPart")
        local targetCFrame = ghostRoot and ghostRoot.CFrame or originalCFrame

        local animate = ghostClone:FindFirstChild("Animate")
        if animate then
            animate.Disabled = true
            animate.Parent = originalCharacter
        end

        ghostClone:Destroy()

        if origRoot then
            origRoot.CFrame = targetCFrame
        end

        local origHumanoid = originalCharacter:FindFirstChildWhichIsA("Humanoid")
        preserveGuis()
        LocalPlayer.Character = originalCharacter
        if origHumanoid then
            Workspace.CurrentCamera.CameraSubject = origHumanoid
        end
        restoreGuis()

        if animate then
            task.wait(0.1)
            animate.Disabled = false
        end
    end
end

-- NEW SECTION: Fake Animation on Ghost (Fake) Character --
local fakeAnimStop
local function stopFakeAnimation()
    fakeAnimStop = true
    fakeAnimRunning = false
    for _, script in pairs(ghostClone:GetChildren()) do
        if script:IsA("LocalScript") and not script.Enabled then
            script.Enabled = true
        end
    end
    if ghostClone then
        for motor, orig in pairs(ghostOriginalMotorCFrames) do
            if motor and motor:IsA("Motor6D") then
                motor.C0 = orig.C0
                motor.C1 = orig.C1
            end
        end
        for _, partName in ipairs(bodyParts) do
            local part = ghostClone:FindFirstChild(partName)
            if part and part:IsA("BasePart") then
                part.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                part.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
            end
        end
    end
end

local fakeAnimRunning = false
local currentAnimationId = nil
fakeAnimStop = false
local fakeAnimSpeed = 1
local function playFakeAnimation(animationId)
    if not ghostClone then
        warn("No fake character available!")
        return
    end
    if animationId == "" then return end
    
    if fakeAnimRunning and currentAnimationId == animationId then
        stopFakeAnimation()
        currentAnimationId = nil
        return
    end
    
    if fakeAnimRunning then
        stopFakeAnimation()
    end
    task.wait(0.1)

    for motor, orig in pairs(ghostOriginalMotorCFrames) do
        motor.C0 = orig.C0
    end

    local success, NeededAssets = pcall(function()
        return game:GetObjects("rbxassetid://" .. animationId)[1]
    end)
    if not success or not NeededAssets then
        warn("Invalid Animation ID: " .. animationId)
        return
    end

    local character = ghostClone
    local rootPart = character:WaitForChild("HumanoidRootPart")
    local head = character:WaitForChild("Head")
    local leftFoot = character:WaitForChild("LeftFoot")
    local leftHand = character:WaitForChild("LeftHand")
    local leftLowerArm = character:WaitForChild("LeftLowerArm")
    local leftLowerLeg = character:WaitForChild("LeftLowerLeg")
    local leftUpperArm = character:WaitForChild("LeftUpperArm")
    local leftUpperLeg = character:WaitForChild("LeftUpperLeg")
    local lowerTorso = character:WaitForChild("LowerTorso")
    local rightFoot = character:WaitForChild("RightFoot")
    local rightHand = character:WaitForChild("RightHand")
    local rightLowerArm = character:WaitForChild("RightLowerArm")
    local rightLowerLeg = character:WaitForChild("RightLowerLeg")
    local rightUpperArm = character:WaitForChild("RightUpperArm")
    local rightUpperLeg = character:WaitForChild("RightUpperLeg")
    local upperTorso = character:WaitForChild ("UpperTorso")

    local Joints = {
        ["Torso"] = rootPart:FindFirstChild("RootJoint"),
        ["Head"] = head:FindFirstChild("Neck"),
        ["LeftUpperArm"] = leftUpperArm:FindFirstChild("LeftShoulder"),
        ["RightUpperArm"] = rightUpperArm:FindFirstChild("RightShoulder"),
        ["LeftUpperLeg"] = leftUpperLeg:FindFirstChild("LeftHip"),
        ["RightUpperLeg"] = rightUpperLeg:FindFirstChild("RightHip"),
        ["LeftFoot"] = leftFoot:FindFirstChild("LeftAnkle"),
        ["RightFoot"] = rightFoot:FindFirstChild("RightAnkle"),
        ["LeftHand"] = leftHand:FindFirstChild("LeftWrist"),
        ["RightHand"] = rightHand:FindFirstChild("RightWrist"),
        ["LeftLowerArm"] = leftLowerArm:FindFirstChild("LeftElbow"),
        ["RightLowerArm"] = rightLowerArm:FindFirstChild("RightElbow"),
        ["LeftLowerLeg"] = leftLowerLeg:FindFirstChild("LeftKnee"),
        ["RightLowerLeg"] = rightLowerLeg:FindFirstChild("RightKnee"),
        ["LowerTorso"] = lowerTorso:FindFirstChild("Root"),
        ["UpperTorso"] = upperTorso:FindFirstChild("Waist"),
    }
    fakeAnimStop = false
    fakeAnimRunning = true
    currentAnimationId = animationId
    local part = Instance.new("Part")
    part.Size = Vector3.new(2048, 0.1, 2048)
    part.Anchored = true
    part.Position = ghostClone.LowerTorso.Position + Vector3.new(0, -0.2, 0)
    part.Transparency = 1
    part.Parent = Workspace
    ghostClone:FindFirstChildWhichIsA("Humanoid").PlatformStand = true
    task.wait(0.1)
    for _, script in pairs(ghostClone:GetChildren()) do
        if script:IsA("LocalScript") and script.Enabled then
            script.Enabled = false
        end
    end
    ghostClone:FindFirstChildWhichIsA("Humanoid").PlatformStand = false
    part:Destroy()
    spawn(function()
        while fakeAnimRunning do
            if fakeAnimStop then
                fakeAnimRunning = false
                break
            end

            local keyframes = NeededAssets:GetKeyframes()
            for ii, frame in pairs(keyframes) do
                if fakeAnimStop then break end

                if ii < #keyframes then
                    local nextFrame = keyframes[ii + 1]
                    local waitTime = (nextFrame.Time - frame.Time) / fakeAnimSpeed

                    for _, v in pairs(frame:GetDescendants()) do
                        local motor = Joints[v.Name]
                        if motor and ghostOriginalMotorCFrames[motor] then
                            motor.C0 = ghostOriginalMotorCFrames[motor].C0 * v.CFrame
                        end
                    end

                    task.wait(waitTime)
                else
                    for _, v in pairs(frame:GetDescendants()) do
                        local motor = Joints[v.Name]
                        if motor and ghostOriginalMotorCFrames[motor] then
                            motor.C0 = ghostOriginalMotorCFrames[motor].C0 * v.CFrame
                        end
                    end
                end
            end

            task.wait(1 / 30)
        end
    end)
end

-- Function to update Keybind Button Text
local function updateKeybindButtonText(animButtonData, animName)
    local keybind = animationKeybinds[animName]
    if keybind then
        animButtonData.KeybindButton.Text = keybind.Name
        animButtonData.RemoveBindButton.Visible = true
    else
        animButtonData.KeybindButton.Text = "Bind"
        animButtonData.RemoveBindButton.Visible = false
    end
end

-- Function to create the Animation List GUI with tabs and minimize button
local function createAnimationListGui(animTextBox)
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "AnimationListGui"
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

    loadFavorites()
    loadKeybinds()

    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 300, 0, 450)
    mainFrame.Position = UDim2.new(0.7, -150, 0.5, -225)
    mainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
    mainFrame.BorderSizePixel = 0
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0, 12)
    uiCorner.Parent = mainFrame
    local uiGradient = Instance.new("UIGradient")
    uiGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(25, 25, 30)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(35, 35, 40))
    }
    uiGradient.Parent = mainFrame
    mainFrame.Parent = screenGui

    local titleBar = Instance.new("Frame")
    titleBar.Size = UDim2.new(1, 0, 0, 50)
    titleBar.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
    titleBar.BorderSizePixel = 0
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 12)
    titleCorner.Parent = titleBar
    titleBar.Parent = mainFrame

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(0.7, 0, 1, 0)
    titleLabel.Position = UDim2.new(0.05, 0, 0, 0)
    titleLabel.Text = "Animations"
    titleLabel.TextColor3 = Color3.fromRGB(220, 220, 255)
    titleLabel.TextSize = 20
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.BackgroundTransparency = 1
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = titleBar

    local minimizeButton = Instance.new("TextButton")
    minimizeButton.Size = UDim2.new(0, 32, 0, 32)
    minimizeButton.Position = UDim2.new(1, -80, 0, 9)
    minimizeButton.Text = "âˆ’"
    minimizeButton.TextColor3 = Color3.fromRGB(200, 200, 200)
    minimizeButton.TextSize = 24
    minimizeButton.Font = Enum.Font.GothamBold
    minimizeButton.BackgroundColor3 = Color3.fromRGB(45, 45, 50)
    minimizeButton.BackgroundTransparency = 0.3
    local minCorner = Instance.new("UICorner")
    minCorner.CornerRadius = UDim.new(1, 0)
    minCorner.Parent = minimizeButton
    minimizeButton.Parent = titleBar

    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0, 32, 0, 32)
    closeButton.Position = UDim2.new(1, -40, 0, 9)
    closeButton.Text = "Ã—"
    closeButton.TextColor3 = Color3.fromRGB(255, 100, 100)
    closeButton.TextSize = 24
    closeButton.Font = Enum.Font.GothamBold
    closeButton.BackgroundColor3 = Color3.fromRGB(45, 45, 50)
    closeButton.BackgroundTransparency = 0.3
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(1, 0)
    closeCorner.Parent = closeButton
    closeButton.Parent = titleBar

    local contentFrame = Instance.new("Frame")
    contentFrame.Size = UDim2.new(1, 0, 1, -50)
    contentFrame.Position = UDim2.new(0, 0, 0, 50)
    contentFrame.BackgroundTransparency = 1
    contentFrame.Parent = mainFrame

    local tabFrame = Instance.new("Frame")
    tabFrame.Size = UDim2.new(0.9, 0, 0, 40)
    tabFrame.Position = UDim2.new(0.05, 0, 0, 10)
    tabFrame.BackgroundTransparency = 1
    tabFrame.Parent = contentFrame

    local allTabButton = Instance.new("TextButton")
    allTabButton.Size = UDim2.new(0.48, -5, 0, 35)
    allTabButton.Position = UDim2.new(0, 0, 0, 0)
    allTabButton.Text = "All"
    allTabButton.TextColor3 = Color3.fromRGB(220, 220, 255)
    allTabButton.TextSize = 16
    allTabButton.Font = Enum.Font.GothamSemibold
    allTabButton.BackgroundColor3 = Color3.fromRGB(45, 45, 50)
    allTabButton.BorderSizePixel = 0
    local allTabCorner = Instance.new("UICorner")
    allTabCorner.CornerRadius = UDim.new(0, 8)
    allTabCorner.Parent = allTabButton
    allTabButton.Parent = tabFrame

    local favTabButton = Instance.new("TextButton")
    favTabButton.Size = UDim2.new(0.48, -5, 0, 35)
    favTabButton.Position = UDim2.new(0.52, 5, 0, 0)
    favTabButton.Text = "Favorites"
    favTabButton.TextColor3 = Color3.fromRGB(220, 220, 255)
    favTabButton.TextSize = 16
    favTabButton.Font = Enum.Font.GothamSemibold
    favTabButton.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
    favTabButton.BorderSizePixel = 0
    local favTabCorner = Instance.new("UICorner")
    favTabCorner.CornerRadius = UDim.new(0, 8)
    favTabCorner.Parent = favTabButton
    favTabButton.Parent = tabFrame

    local searchBox = Instance.new("TextBox")
    searchBox.Size = UDim2.new(0.9, 0, 0, 35)
    searchBox.Position = UDim2.new(0.05, 0, 0, 55)
    searchBox.PlaceholderText = "Search animations..."
    searchBox.Text = ""
    searchBox.TextColor3 = Color3.fromRGB(200, 200, 200)
    searchBox.PlaceholderColor3 = Color3.fromRGB(100, 100, 100)
    searchBox.TextSize = 14
    searchBox.Font = Enum.Font.Gotham
    searchBox.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
    searchBox.BorderSizePixel = 0
    local searchCorner = Instance.new("UICorner")
    searchCorner.CornerRadius = UDim.new(0, 8)
    searchCorner.Parent = searchBox
    searchBox.Parent = contentFrame

    local allScrollFrame = Instance.new("ScrollingFrame")
    allScrollFrame.Size = UDim2.new(0.9, 0, 0, 295)
    allScrollFrame.Position = UDim2.new(0.05, 0, 0, 100)
    allScrollFrame.BackgroundTransparency = 1
    allScrollFrame.BorderSizePixel = 0
    allScrollFrame.ScrollBarThickness = 4
    allScrollFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
    allScrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    allScrollFrame.Parent = contentFrame

    local favScrollFrame = Instance.new("ScrollingFrame")
    favScrollFrame.Size = UDim2.new(0.9, 0, 0, 295)
    favScrollFrame.Position = UDim2.new(0.05, 0, 0, 100)
    favScrollFrame.BackgroundTransparency = 1
    favScrollFrame.BorderSizePixel = 0
    favScrollFrame.ScrollBarThickness = 4
    favScrollFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
    favScrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    favScrollFrame.Visible = false
    favScrollFrame.Parent = contentFrame

    local animationButtons = {}
    local keybindInputActive = false
    local currentAnimationForKeybind = nil

    local function createAnimationButton(animName, animId, parentFrame)
        local container = Instance.new("Frame")
        container.Size = UDim2.new(1, 0, 0, 45)
        container.BackgroundTransparency = 1
        container.Parent = parentFrame

        local nameButton = Instance.new("TextButton")
        nameButton.Size = UDim2.new(0.55, 0, 0, 35)
        nameButton.Position = UDim2.new(0, 5, 0, 5)
        nameButton.Text = animName
        nameButton.TextColor3 = Color3.fromRGB(220, 220, 220)
        nameButton.TextSize = 14
        nameButton.Font = Enum.Font.GothamMedium
        nameButton.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
        nameButton.BorderSizePixel = 0
        nameButton.TextXAlignment = Enum.TextXAlignment.Left
        nameButton.TextTruncate = Enum.TextTruncate.AtEnd
        local nameCorner = Instance.new("UICorner")
        nameCorner.CornerRadius = UDim.new(0, 6)
        nameCorner.Parent = nameButton
        nameButton.Parent = container

        nameButton.MouseButton1Click:Connect(function()
            animTextBox.Text = tostring(animId)
        end)

        local favoriteButton = Instance.new("TextButton")
        favoriteButton.Size = UDim2.new(0, 30, 0, 30)
        favoriteButton.Position = UDim2.new(0.57, 5, 0, 7)
        favoriteButton.Text = favoriteAnimations[animName] and "â˜…" or "â˜†"
        favoriteButton.TextColor3 = Color3.fromRGB(255, 215, 0)
        favoriteButton.TextSize = 18
        favoriteButton.Font = Enum.Font.GothamBold
        favoriteButton.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
        favoriteButton.BorderSizePixel = 0
        local favCorner = Instance.new("UICorner")
        favCorner.CornerRadius = UDim.new(1, 0)
        favCorner.Parent = favoriteButton
        favoriteButton.Parent = container

        local keybindButton = Instance.new("TextButton")
        keybindButton.Size = UDim2.new(0, 40, 0, 30)
        keybindButton.Position = UDim2.new(0.73, 0, 0, 7)
        keybindButton.Text = "Bind"
        keybindButton.TextColor3 = Color3.fromRGB(150, 150, 255)
        keybindButton.TextSize = 12
        keybindButton.Font = Enum.Font.GothamMedium
        keybindButton.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
        keybindButton.BorderSizePixel = 0
        local keybindCorner = Instance.new("UICorner")
        keybindCorner.CornerRadius = UDim.new(0, 6)
        keybindCorner.Parent = keybindButton
        keybindButton.Parent = container

        local removeBindButton = Instance.new("TextButton")
        removeBindButton.Size = UDim2.new(0, 30, 0, 30)
        removeBindButton.Position = UDim2.new(0.87, 0, 0, 7)
        removeBindButton.Text = "Ã—"
        removeBindButton.TextColor3 = Color3.fromRGB(255, 100, 100)
        removeBindButton.TextSize = 18
        removeBindButton.Font = Enum.Font.GothamBold
        removeBindButton.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
        removeBindButton.BorderSizePixel = 0
        removeBindButton.Visible = false
        local removeCorner = Instance.new("UICorner")
        removeCorner.CornerRadius = UDim.new(1, 0)
        removeCorner.Parent = removeBindButton
        removeBindButton.Parent = container

        favoriteButton.MouseButton1Click:Connect(function()
            if favoriteAnimations[animName] then
                favoriteAnimations[animName] = nil
                favoriteButton.Text = "â˜†"
            else
                favoriteAnimations[animName] = true
                favoriteButton.Text = "â˜…"
            end
            saveFavorites()
            updateAnimationButtons("all")
            updateAnimationButtons("favorites")
        end)

        keybindButton.MouseButton1Click:Connect(function()
            if keybindInputActive then return end
            keybindInputActive = true
            currentAnimationForKeybind = animName
            keybindButton.Text = "..."

            local connection
            connection = UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
                if not keybindInputActive or currentAnimationForKeybind ~= animName then
                    connection:Disconnect()
                    return
                end
                if input.UserInputType == Enum.UserInputType.Keyboard then
                    animationKeybinds[animName] = input.KeyCode
                    saveKeybinds()
                    updateKeybindButtonText(animationButtons[animName], animName)
                    keybindInputActive = false
                    currentAnimationForKeybind = nil
                    connection:Disconnect()
                elseif input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    updateKeybindButtonText(animationButtons[animName], animName)
                    keybindInputActive = false
                    currentAnimationForKeybind = nil
                    connection:Disconnect()
                end
            end)
        end)

        removeBindButton.MouseButton1Click:Connect(function()
            animationKeybinds[animName] = nil
            saveKeybinds()
            updateKeybindButtonText(animationButtons[animName], animName)
        end)

        animationButtons[animName] = {
            Container = container,
            NameButton = nameButton,
            FavoriteButton = favoriteButton,
            KeybindButton = keybindButton,
            RemoveBindButton = removeBindButton
        }
    end

    local function updateAnimationButtons(tab, searchText)
        searchText = searchText or ""
        local scrollFrame = (tab == "all") and allScrollFrame or favScrollFrame
        local animationList = (tab == "all") and BuiltInAnimationsR15 or favoriteAnimations

        for _, child in ipairs(scrollFrame:GetChildren()) do
            if child:IsA("Frame") then
                child:Destroy()
            end
        end

        local sortedNames = {}
        for animName in pairs(animationList) do
            table.insert(sortedNames, animName)
        end
        table.sort(sortedNames)

        local yOffset = 0
        for _, animName in ipairs(sortedNames) do
            if string.find(string.lower(animName), string.lower(searchText)) then
                local animId = BuiltInAnimationsR15[animName]
                createAnimationButton(animName, animId, scrollFrame)
                animationButtons[animName].Container.Position = UDim2.new(0, 0, 0, yOffset)
                updateKeybindButtonText(animationButtons[animName], animName)
                yOffset = yOffset + 50
            end
        end
        scrollFrame.CanvasSize = UDim2.new(0, 0, 0, yOffset)
    end

    updateAnimationButtons("all")

    allTabButton.MouseButton1Click:Connect(function()
        allScrollFrame.Visible = true
        favScrollFrame.Visible = false
        allTabButton.BackgroundColor3 = Color3.fromRGB(45, 45, 50)
        favTabButton.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
        updateAnimationButtons("all", searchBox.Text)
    end)

    favTabButton.MouseButton1Click:Connect(function()
        allScrollFrame.Visible = false
        favScrollFrame.Visible = true
        allTabButton.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
        favTabButton.BackgroundColor3 = Color3.fromRGB(45, 45, 50)
        updateAnimationButtons("favorites", searchBox.Text)
    end)

    searchBox:GetPropertyChangedSignal("Text"):Connect(function()
        if allTabButton.BackgroundColor3 == Color3.fromRGB(45, 45, 50) then
            updateAnimationButtons("all", searchBox.Text)
        else
            updateAnimationButtons("favorites", searchBox.Text)
        end
    end)

    local originalGuiHeight = mainFrame.Size.Y.Offset
    local minimizedGuiHeight = titleBar.Size.Y.Offset + 10
    local minimized = false

    minimizeButton.MouseButton1Click:Connect(function()
        minimized = not minimized
        if minimized then
            contentFrame.Visible = false
            mainFrame.Size = UDim2.new(0, mainFrame.Size.X.Offset, 0, minimizedGuiHeight)
        else
            contentFrame.Visible = true
            mainFrame.Size = UDim2.new(0, mainFrame.Size.X.Offset, 0, originalGuiHeight)
        end
    end)

    closeButton.MouseButton1Click:Connect(function()
        screenGui:Destroy()
    end)

    local dragging = false
    local dragInput, dragStart, startPos
    local function updateInput(input)
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input == dragInput) then
            updateInput(input)
        end
    end)

    return screenGui
end

-- Function to create the Custom Animations GUI with minimize button and improved Create button
local function createCustomAnimationsGui(animTextBox)
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "CustomAnimationsGui"
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

    loadCustomAnimations()
    loadKeybinds()

    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 300, 0, 450)
    mainFrame.Position = UDim2.new(0.3, -150, 0.5, -225)
    mainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
    mainFrame.BorderSizePixel = 0
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0, 12)
    uiCorner.Parent = mainFrame
    local uiGradient = Instance.new("UIGradient")
    uiGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(25, 25, 30)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(35, 35, 40))
    }
    uiGradient.Parent = mainFrame
    mainFrame.Parent = screenGui

    local titleBar = Instance.new("Frame")
    titleBar.Size = UDim2.new(1, 0, 0, 50)
    titleBar.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
    titleBar.BorderSizePixel = 0
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 12)
    titleCorner.Parent = titleBar
    local titleGradient = Instance.new("UIGradient")
    titleGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(40, 40, 45)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(50, 50, 55))
    }
    titleGradient.Parent = titleBar
    titleBar.Parent = mainFrame

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(0.7, 0, 1, 0)
    titleLabel.Position = UDim2.new(0.05, 0, 0, 0)
    titleLabel.Text = "Custom Animations"
    titleLabel.TextColor3 = Color3.fromRGB(200, 200, 255)
    titleLabel.TextSize = 20
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.BackgroundTransparency = 1
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = titleBar

    local minimizeButton = Instance.new("TextButton")
    minimizeButton.Size = UDim2.new(0, 32, 0, 32)
    minimizeButton.Position = UDim2.new(1, -80, 0, 9)
    minimizeButton.Text = "âˆ’"
    minimizeButton.TextColor3 = Color3.fromRGB(200, 200, 200)
    minimizeButton.TextSize = 24
    minimizeButton.Font = Enum.Font.GothamBold
    minimizeButton.BackgroundColor3 = Color3.fromRGB(50, 50, 55)
    minimizeButton.BackgroundTransparency = 0.2
    local minCorner = Instance.new("UICorner")
    minCorner.CornerRadius = UDim.new(1, 0)
    minCorner.Parent = minimizeButton
    minimizeButton.Parent = titleBar

    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0, 32, 0, 32)
    closeButton.Position = UDim2.new(1, -40, 0, 9)
    closeButton.Text = "Ã—"
    closeButton.TextColor3 = Color3.fromRGB(255, 100, 100)
    closeButton.TextSize = 24
    closeButton.Font = Enum.Font.GothamBold
    closeButton.BackgroundColor3 = Color3.fromRGB(50, 50, 55)
    closeButton.BackgroundTransparency = 0.2
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(1, 0)
    closeCorner.Parent = closeButton
    closeButton.Parent = titleBar

    local contentFrame = Instance.new("Frame")
    contentFrame.Size = UDim2.new(1, 0, 1, -50)
    contentFrame.Position = UDim2.new(0, 0, 0, 50)
    contentFrame.BackgroundTransparency = 1
    contentFrame.Parent = mainFrame

    local inputFrame = Instance.new("Frame")
    inputFrame.Size = UDim2.new(0.9, 0, 0, 90)
    inputFrame.Position = UDim2.new(0.05, 0, 0, 10)
    inputFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
    inputFrame.BorderSizePixel = 0
    local inputCorner = Instance.new("UICorner")
    inputCorner.CornerRadius = UDim.new(0, 8)
    inputCorner.Parent = inputFrame
    inputFrame.Parent = contentFrame

    local nameBox = Instance.new("TextBox")
    nameBox.Size = UDim2.new(0.95, 0, 0, 35)
    nameBox.Position = UDim2.new(0.025, 0, 0, 10)
    nameBox.PlaceholderText = "Animation Name"
    nameBox.Text = ""
    nameBox.TextColor3 = Color3.fromRGB(220, 220, 220)
    nameBox.PlaceholderColor3 = Color3.fromRGB(100, 100, 100)
    nameBox.TextSize = 14
    nameBox.Font = Enum.Font.Gotham
    nameBox.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
    nameBox.BorderSizePixel = 0
    local nameCorner = Instance.new("UICorner")
    nameCorner.CornerRadius = UDim.new(0, 6)
    nameCorner.Parent = nameBox
    nameBox.Parent = inputFrame

    local idBox = Instance.new("TextBox")
    idBox.Size = UDim2.new(0.95, 0, 0, 35)
    idBox.Position = UDim2.new(0.025, 0, 0, 50)
    idBox.PlaceholderText = "Animation ID"
    idBox.Text = ""
    idBox.TextColor3 = Color3.fromRGB(220, 220, 220)
    idBox.PlaceholderColor3 = Color3.fromRGB(100, 100, 100)
    idBox.TextSize = 14
    idBox.Font = Enum.Font.Gotham
    idBox.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
    idBox.BorderSizePixel = 0
    local idCorner = Instance.new("UICorner")
    idCorner.CornerRadius = UDim.new(0, 6)
    idCorner.Parent = idBox
    idBox.Parent = inputFrame

    local createButton = Instance.new("TextButton")
    createButton.Size = UDim2.new(0.4, 0, 0, 35)
    createButton.Position = UDim2.new(0.3, 0, 0, 105)
    createButton.Text = "Create"
    createButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    createButton.TextSize = 16
    createButton.Font = Enum.Font.GothamSemibold
    createButton.BackgroundColor3 = Color3.fromRGB(60, 120, 255)
    createButton.BorderSizePixel = 0
    local createCorner = Instance.new("UICorner")
    createCorner.CornerRadius = UDim.new(0, 6)
    createCorner.Parent = createButton
    local createGradient = Instance.new("UIGradient")
    createGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(60, 120, 255)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(80, 140, 255))
    }
    createGradient.Parent = createButton
    createButton.Parent = contentFrame

    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Size = UDim2.new(0.9, 0, 0, 245)
    scrollFrame.Position = UDim2.new(0.05, 0, 0, 155)
    scrollFrame.BackgroundTransparency = 1
    scrollFrame.BorderSizePixel = 0
    scrollFrame.ScrollBarThickness = 4
    scrollFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    scrollFrame.Parent = contentFrame

    local customButtons = {}
    local keybindInputActive = false
    local currentAnimationForKeybind = nil

    local function createCustomButton(animName, animId)
        local container = Instance.new("Frame")
        container.Size = UDim2.new(1, 0, 0, 45)
        container.BackgroundTransparency = 1
        container.Parent = scrollFrame

        local nameButton = Instance.new("TextButton")
        nameButton.Size = UDim2.new(0.7, 0, 0, 35)
        nameButton.Position = UDim2.new(0, 5, 0, 5)
        nameButton.Text = animName
        nameButton.TextColor3 = Color3.fromRGB(220, 220, 220)
        nameButton.TextSize = 14
        nameButton.Font = Enum.Font.GothamMedium
        nameButton.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
        nameButton.BorderSizePixel = 0
        nameButton.TextXAlignment = Enum.TextXAlignment.Left
        nameButton.TextTruncate = Enum.TextTruncate.AtEnd
        local nameCorner = Instance.new("UICorner")
        nameCorner.CornerRadius = UDim.new(0, 6)
        nameCorner.Parent = nameButton
        nameButton.Parent = container

        nameButton.MouseButton1Click:Connect(function()
            animTextBox.Text = tostring(animId)
        end)

        local keybindButton = Instance.new("TextButton")
        keybindButton.Size = UDim2.new(0, 40, 0, 30)
        keybindButton.Position = UDim2.new(0.73, 0, 0, 7)
        keybindButton.Text = "Bind"
        keybindButton.TextColor3 = Color3.fromRGB(150, 150, 255)
        keybindButton.TextSize = 12
        keybindButton.Font = Enum.Font.GothamMedium
        keybindButton.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
        keybindButton.BorderSizePixel = 0
        local keybindCorner = Instance.new("UICorner")
        keybindCorner.CornerRadius = UDim.new(0, 6)
        keybindCorner.Parent = keybindButton
        keybindButton.Parent = container

        local removeBindButton = Instance.new("TextButton")
        removeBindButton.Size = UDim2.new(0, 30, 0, 30)
        removeBindButton.Position = UDim2.new(0.87, 0, 0, 7)
        removeBindButton.Text = "Ã—"
        removeBindButton.TextColor3 = Color3.fromRGB(255, 100, 100)
        removeBindButton.TextSize = 18
        removeBindButton.Font = Enum.Font.GothamBold
        removeBindButton.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
        removeBindButton.BorderSizePixel = 0
        removeBindButton.Visible = false
        local removeCorner = Instance.new("UICorner")
        removeCorner.CornerRadius = UDim.new(1, 0)
        removeCorner.Parent = removeBindButton
        removeBindButton.Parent = container

        keybindButton.MouseButton1Click:Connect(function()
            if keybindInputActive then return end
            keybindInputActive = true
            currentAnimationForKeybind = animName
            keybindButton.Text = "..."

            local connection
            connection = UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
                if not keybindInputActive or currentAnimationForKeybind ~= animName then
                    connection:Disconnect()
                    return
                end
                if input.UserInputType == Enum.UserInputType.Keyboard then
                    animationKeybinds[animName] = input.KeyCode
                    saveKeybinds()
                    updateKeybindButtonText(customButtons[animName], animName)
                    keybindInputActive = false
                    currentAnimationForKeybind = nil
                    connection:Disconnect()
                elseif input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    updateKeybindButtonText(customButtons[animName], animName)
                    keybindInputActive = false
                    currentAnimationForKeybind = nil
                    connection:Disconnect()
                end
            end)
        end)

        removeBindButton.MouseButton1Click:Connect(function()
            animationKeybinds[animName] = nil
            saveKeybinds()
            updateKeybindButtonText(customButtons[animName], animName)
        end)

        customButtons[animName] = {
            Container = container,
            NameButton = nameButton,
            KeybindButton = keybindButton,
            RemoveBindButton = removeBindButton
        }
    end

    local function updateCustomButtons()
        for _, child in ipairs(scrollFrame:GetChildren()) do
            if child:IsA("Frame") then
                child:Destroy()
            end
        end

        local sortedNames = {}
        for animName in pairs(customAnimations) do
            table.insert(sortedNames, animName)
        end
        table.sort(sortedNames)

        local yOffset = 0
        for _, animName in ipairs(sortedNames) do
            local animId = customAnimations[animName]
            createCustomButton(animName, animId)
            customButtons[animName].Container.Position = UDim2.new(0, 0, 0, yOffset)
            updateKeybindButtonText(customButtons[animName], animName)
            yOffset = yOffset + 50
        end
        scrollFrame.CanvasSize = UDim2.new(0, 0, 0, yOffset)
    end

    createButton.MouseButton1Click:Connect(function()
        local animName = nameBox.Text
        local animId = idBox.Text
        if animName ~= "" and animId ~= "" then
            if not customAnimations[animName] then
                customAnimations[animName] = animId
                saveCustomAnimations()
                updateCustomButtons()
                nameBox.Text = ""
                idBox.Text = ""
            else
                warn("Animation name already exists!")
            end
        else
            warn("Please enter both a name and an ID!")
        end
    end)

    updateCustomButtons()

    local originalGuiHeight = mainFrame.Size.Y.Offset
    local minimizedGuiHeight = titleBar.Size.Y.Offset + 10
    local minimized = false

    minimizeButton.MouseButton1Click:Connect(function()
        minimized = not minimized
        if minimized then
            contentFrame.Visible = false
            mainFrame.Size = UDim2.new(0, mainFrame.Size.X.Offset, 0, minimizedGuiHeight)
        else
            contentFrame.Visible = true
            mainFrame.Size = UDim2.new(0, mainFrame.Size.X.Offset, 0, originalGuiHeight)
        end
    end)

    closeButton.MouseButton1Click:Connect(function()
        screenGui:Destroy()
    end)

    local dragging = false
    local dragInput, dragStart, startPos
    local function updateInput(input)
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input == dragInput) then
            updateInput(input)
        end
    end)

    return screenGui
end

-- Function to create the main GUI (modernized)
local function createDraggableGui(getGhostEnabled, toggleGhost)
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "EnhancedGhostGui"
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 320, 0, 280)
    mainFrame.Position = UDim2.new(0.5, -160, 0.5, -140)
    mainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
    mainFrame.BorderSizePixel = 0
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0, 12)
    uiCorner.Parent = mainFrame
    local uiGradient = Instance.new("UIGradient")
    uiGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(25, 25, 30)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(35, 35, 40))
    }
    uiGradient.Parent = mainFrame
    mainFrame.Parent = screenGui

    local titleBar = Instance.new("Frame")
    titleBar.Size = UDim2.new(1, 0, 0, 50)
    titleBar.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
    titleBar.BorderSizePixel = 0
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 12)
    titleCorner.Parent = titleBar
    titleBar.Parent = mainFrame

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(0.7, 0, 1, 0)
    titleLabel.Position = UDim2.new(0.05, 0, 0, 0)
    titleLabel.Text = "Reanimation Control"
    titleLabel.TextColor3 = Color3.fromRGB(220, 220, 255)
    titleLabel.TextSize = 20
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.BackgroundTransparency = 1
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = titleBar

    local minimizeButton = Instance.new("TextButton")
    minimizeButton.Size = UDim2.new(0, 32, 0, 32)
    minimizeButton.Position = UDim2.new(1, -80, 0, 9)
    minimizeButton.Text = "âˆ’"
    minimizeButton.TextColor3 = Color3.fromRGB(200, 200, 200)
    minimizeButton.TextSize = 24
    minimizeButton.Font = Enum.Font.GothamBold
    minimizeButton.BackgroundColor3 = Color3.fromRGB(45, 45, 50)
    minimizeButton.BackgroundTransparency = 0.3
    local minCorner = Instance.new("UICorner")
    minCorner.CornerRadius = UDim.new(1, 0)
    minCorner.Parent = minimizeButton
    minimizeButton.Parent = titleBar

    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0, 32, 0, 32)
    closeButton.Position = UDim2.new(1, -40, 0, 9)
    closeButton.Text = "Ã—"
    closeButton.TextColor3 = Color3.fromRGB(255, 100, 100)
    closeButton.TextSize = 24
    closeButton.Font = Enum.Font.GothamBold
    closeButton.BackgroundColor3 = Color3.fromRGB(45, 45, 50)
    closeButton.BackgroundTransparency = 0.3
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(1, 0)
    closeCorner.Parent = closeButton
    closeButton.Parent = titleBar

    local contentFrame = Instance.new("Frame")
    contentFrame.Size = UDim2.new(0.9, 0, 1, -60)
    contentFrame.Position = UDim2.new(0.05, 0, 0, 60)
    contentFrame.BackgroundTransparency = 1
    contentFrame.Parent = mainFrame

    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(1, 0, 0, 40)
    toggleButton.Position = UDim2.new(0, 0, 0, 0)
    toggleButton.Text = "Enable Reanimation"
    toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleButton.TextSize = 16
    toggleButton.Font = Enum.Font.GothamSemibold
    toggleButton.BackgroundColor3 = Color3.fromRGB(40, 200, 80)
    toggleButton.BorderSizePixel = 0
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 8)
    toggleCorner.Parent = toggleButton
    toggleButton.Parent = contentFrame

    local speedSection = Instance.new("Frame")
    speedSection.Size = UDim2.new(1, 0, 0, 60)
    speedSection.Position = UDim2.new(0, 0, 0, 50)
    speedSection.BackgroundTransparency = 1
    speedSection.Parent = contentFrame

    local speedLabel = Instance.new("TextLabel")
    speedLabel.Size = UDim2.new(1, 0, 0, 20)
    speedLabel.Text = "Animation Speed: 100%"
    speedLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    speedLabel.TextSize = 14
    speedLabel.Font = Enum.Font.GothamMedium
    speedLabel.BackgroundTransparency = 1
    speedLabel.Parent = speedSection

    local speedSliderBG = Instance.new("Frame")
    speedSliderBG.Size = UDim2.new(1, 0, 0, 10)
    speedSliderBG.Position = UDim2.new(0, 0, 0, 30)
    speedSliderBG.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
    speedSliderBG.BorderSizePixel = 0
    local speedBGCorner = Instance.new("UICorner")
    speedBGCorner.CornerRadius = UDim.new(1, 0)
    speedBGCorner.Parent = speedSliderBG
    speedSliderBG.Parent = speedSection

    local speedSliderFill = Instance.new("Frame")
    speedSliderFill.Size = UDim2.new(0.25, 0, 1, 0)
    speedSliderFill.BackgroundColor3 = Color3.fromRGB(100, 150, 255)
    speedSliderFill.BorderSizePixel = 0
    local speedFillCorner = Instance.new("UICorner")
    speedFillCorner.CornerRadius = UDim.new(1, 0)
    speedFillCorner.Parent = speedSliderFill
    speedSliderFill.Parent = speedSliderBG

    local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

    local function updateSpeedSlider(value)
        local fillValue = value / 4
        local tween = TweenService:Create(speedSliderFill, tweenInfo, {Size = UDim2.new(math.clamp(fillValue, 0, 1), 0, 1, 0)})
        tween:Play()
        speedLabel.Text = "Animation Speed: " .. math.floor(value * 100) .. "%"
        fakeAnimSpeed = value
    end

    updateSpeedSlider(1)

    local isDraggingSpeed = false
    local function updateSpeedFromPosition(input)
        local sliderPosition = (input.Position.X - speedSliderBG.AbsolutePosition.X) / speedSliderBG.AbsoluteSize.X
        sliderPosition = math.clamp(sliderPosition, 0, 1)
        local newValue = sliderPosition * 4
        updateSpeedSlider(newValue)
    end

    speedSliderBG.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            isDraggingSpeed = true
            updateSpeedFromPosition(input)
        end
    end)
    speedSliderBG.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            isDraggingSpeed = false
        end
    end)
    speedSliderBG.InputChanged:Connect(function(input)
        if isDraggingSpeed and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            updateSpeedFromPosition(input)
        end
    end)

    local animSection = Instance.new("Frame")
    animSection.Size = UDim2.new(1, 0, 0, 100)
    animSection.Position = UDim2.new(0, 0, 0, 120)
    animSection.BackgroundTransparency = 1
    animSection.Parent = contentFrame

    local animTextBox = Instance.new("TextBox")
    animTextBox.Size = UDim2.new(1, 0, 0, 35)
    animTextBox.Position = UDim2.new(0, 0, 0, 0)
    animTextBox.PlaceholderText = "Enter Animation ID"
    animTextBox.Text = ""
    animTextBox.TextColor3 = Color3.fromRGB(200, 200, 200)
    animTextBox.PlaceholderColor3 = Color3.fromRGB(100, 100, 100)
    animTextBox.TextSize = 14
    animTextBox.Font = Enum.Font.Gotham
    animTextBox.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
    animTextBox.BorderSizePixel = 0
    local animTextCorner = Instance.new("UICorner")
    animTextCorner.CornerRadius = UDim.new(0, 8)
    animTextCorner.Parent = animTextBox
    animTextBox.Parent = animSection

    local playAnimButton = Instance.new("TextButton")
    playAnimButton.Size = UDim2.new(0.48, -5, 0, 35)
    playAnimButton.Position = UDim2.new(0, 0, 0, 45)
    playAnimButton.Text = "Play"
    playAnimButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    playAnimButton.TextSize = 14
    playAnimButton.Font = Enum.Font.GothamSemibold
    playAnimButton.BackgroundColor3 = Color3.fromRGB(40, 200, 80)
    playAnimButton.BorderSizePixel = 0
    local playAnimCorner = Instance.new("UICorner")
    playAnimCorner.CornerRadius = UDim.new(0, 8)
    playAnimCorner.Parent = playAnimButton
    playAnimButton.Parent = animSection

    local stopAnimButton = Instance.new("TextButton")
    stopAnimButton.Size = UDim2.new(0.48, -5, 0, 35)
    stopAnimButton.Position = UDim2.new(0.52, 5, 0, 45)
    stopAnimButton.Text = "Stop"
    stopAnimButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    stopAnimButton.TextSize = 14
    stopAnimButton.Font = Enum.Font.GothamSemibold
    stopAnimButton.BackgroundColor3 = Color3.fromRGB(200, 40, 40)
    stopAnimButton.BorderSizePixel = 0
    local stopAnimCorner = Instance.new("UICorner")
    stopAnimCorner.CornerRadius = UDim.new(0, 8)
    stopAnimCorner.Parent = stopAnimButton
    stopAnimButton.Parent = animSection

    local animationListGui = nil
    local customAnimationsGui = nil

    toggleButton.MouseButton1Click:Connect(function()
        local newState = not getGhostEnabled()
        toggleGhost(newState)
        if newState then
            toggleButton.Text = "Disable Reanimation"
            toggleButton.BackgroundColor3 = Color3.fromRGB(200, 40, 40)
            if not animationListGui then
                animationListGui = createAnimationListGui(animTextBox)
            end
            if not customAnimationsGui then
                customAnimationsGui = createCustomAnimationsGui(animTextBox)
            end
        else
            toggleButton.Text = "Enable Reanimation"
            toggleButton.BackgroundColor3 = Color3.fromRGB(40, 200, 80)
            if animationListGui then
                animationListGui:Destroy()
                animationListGui = nil
            end
            if customAnimationsGui then
                customAnimationsGui:Destroy()
                customAnimationsGui = nil
            end
        end
    end)

    playAnimButton.MouseButton1Click:Connect(function()
        if ghostClone then
            playFakeAnimation(animTextBox.Text)
        else
            warn("No fake character available!")
        end
    end)

    stopAnimButton.MouseButton1Click:Connect(function()
        stopFakeAnimation()
    end)

    local originalGuiHeight = mainFrame.Size.Y.Offset
    local minimizedGuiHeight = titleBar.Size.Y.Offset + 10
    local minimized = false

    minimizeButton.MouseButton1Click:Connect(function()
        minimized = not minimized
        if minimized then
            contentFrame.Visible = false
            mainFrame.Size = UDim2.new(0, mainFrame.Size.X.Offset, 0, minimizedGuiHeight)
        else
            contentFrame.Visible = true
            mainFrame.Size = UDim2.new(0, mainFrame.Size.X.Offset, 0, originalGuiHeight)
        end
    end)

    closeButton.MouseButton1Click:Connect(function()
        screenGui:Destroy()
        if animationListGui then
            animationListGui:Destroy()
        end
        if customAnimationsGui then
            customAnimationsGui:Destroy()
        end
    end)

    local dragging = false
    local dragInput, dragStart, startPos
    local function updateInput(input)
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input == dragInput) then
            updateInput(input)
        end
    end)

    return screenGui
end

local gui = createDraggableGui(
    function() return ghostEnabled end,
    setGhostEnabled
)

UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if gameProcessedEvent then return end
    if input.UserInputType == Enum.UserInputType.Keyboard then
        for animName, keyCode in pairs(animationKeybinds) do
            if input.KeyCode == keyCode then
                local animId = BuiltInAnimationsR15[animName] or customAnimations[animName]
                if animId then
                    playFakeAnimation(animId)
                end
                return
            end
        end
    end
end)
